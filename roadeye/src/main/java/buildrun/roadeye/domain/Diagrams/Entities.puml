@startuml
'https://plantuml.com/class-diagram

VehicleServiceImplementation <|-- VehicleRespository
VehicleServiceImplementation <|-- VehicleDto
VehicleServiceImplementation <|-- Vehicle
class VehicleServiceImplementation implements VehicleService {
    - static final String axNotFound = "Vehicle not found";
    - final VehicleRespository vehicleRespository;
    + VehicleServiceImplementation(VehicleRespository vehicleRespository)
    + VehicleDto createVehicle(VehicleDto vehicleDto)
    + ResponseEntity<?> getAllVehicle()
    + ResponseEntity<?> deleteVehicle(Long vehicleId)
    + ResponseEntity<?> updateVehicle(Long vehicleId, VehicleDto updateVehicleDto)
    + ResponseEntity<?> getVehicleById(Long vehicleId)
    - void setVehicleService(Vehicle vehicle, VehicleDto vehicleDto)
}

UserServiceImplementation <|-- UserRepository
UserServiceImplementation <|-- PasswordEncoder
UserServiceImplementation <|-- UserDto
class UserServiceImplementation implements UserService {
    - final UserRepository userRepository;
    - final PasswordEncoder passwordEncoder;
    - static final String axNotFound = "User not found";
    + UserServiceImplementation(UserRepository userRepository, PasswordEncoder passwordEncoder)
    + UserDto createUser(UserDto userDto)
    + ResponseEntity<?> getAllUsers()
    + ResponseEntity<?> deleteUser(UUID userId)
    + ResponseEntity<?> updateUser(UUID userId, UserUpdateDto updateUserDto)
    + ResponseEntity<?> updateUserPassword(UUID userId, UserPasswordDto updateUserDto)
    + ResponseEntity<?> getUserResponseById(UUID userId)
    - void setUserUpdateService(User user, UserUpdateDto userDto)
    - void setUserService(User user, UserDto userDto)
}

UserAddressServiceImplementation <|-- UserAddressRepository
UserAddressServiceImplementation <|-- UserRepository
UserAddressServiceImplementation <|-- AddressRepository
UserAddressServiceImplementation <|-- UserAddressDto
class UserAddressServiceImplementation implements UserAddressService {
    - final UserAddressRepository userAddressRepository;
    - final UserRepository userRepository;
    - final AddressRepository addressRepository;
    + UserAddressServiceImplementation(UserAddressRepository userAddressRepository, UserRepository userRepository, AddressRepository addressRepository)
    + UserAddressDto createUserAddress(UserAddressDto userAddressDto)
    + ResponseEntity<?> getAllUsersAddress()
    + ResponseEntity<?> deleteUserAddress(Long userAddressId)
    + ResponseEntity<?> updateUserAddress(Long userAddressId, UserAddressDto updateUserAddressDto)
    + ResponseEntity<?> getUserAddressById(Long userAddressId)
    + List<UserAddress> findAddressesByUser_Id(UUID userId)
}

StudentRouteServiceImplementation <|-- StudentRouteRepository
StudentRouteServiceImplementation <|-- UserRepository
StudentRouteServiceImplementation <|-- SchoolRepository
StudentRouteServiceImplementation <|-- StudentRouteDto
StudentRouteServiceImplementation <|-- StudentRouteUpdateDto
StudentRouteServiceImplementation <|-- PeriodEnum
class StudentRouteServiceImplementation implements StudentRouteService {
    - final StudentRouteRepository studentRouteRepository;
    - final UserRepository userRepository;
    - final SchoolRepository schoolRepository;
    + StudentRouteServiceImplementation(StudentRouteRepository studentRouteRepository, UserRepository userRepository, SchoolRepository schoolRepository)
    + ResponseEntity<?> getAllStudentRoute()
    + ResponseEntity<?> createStudentRoute(StudentRouteDto routeDto, UUID userId)
    + List<StudentRoute> findSchoolByUser_Id(UUID userId)
    + ResponseEntity<?> deleteStudentRoute(Long studentSchoolId)
    + ResponseEntity<?> updateStudentRoute(Long studentSchoolId, StudentRouteUpdateDto schoolDto)
    + List<StudentRoute> findSchoolBySchool_Id(Long schoolId)
    + ResponseEntity<?> updateStudentRouteImagem(MultipartFile file, Long routeId)
    + List<StudentRouteWithAddresses> getStudentRoutesByPeriodAndDate(PeriodEnum periodEnum, LocalDate localDate)
    - StudentRoute mapToStudentRoute(Object[] result)
    - Address mapToAddress(Object[] result, boolean user)
    - User mapToUser(UUID userId)
    - School mapToSchool(Long schoolId)
}

SchoolServiceImplementation <|-- SchoolRepository
SchoolServiceImplementation <|-- SchoolDto
class SchoolServiceImplementation implements SchoolService {
    - final SchoolRepository schoolRepository;
    + SchoolServiceImplementation(SchoolRepository schoolRepository)
    + SchoolDto createSchool(SchoolDto schoolDto)
    + ResponseEntity<?> getAllSchool()
    + ResponseEntity<?> deleteSchool(Long schoolId)
    + ResponseEntity<?> updateSchool(Long schoolId, SchoolDto schoolDto)
    + ResponseEntity<?> getSchoolById(Long schoolId)
}

SchoolAddressServiceImplementation <|-- SchoolAddressRepository
SchoolAddressServiceImplementation <|-- SchoolRepository
SchoolAddressServiceImplementation <|-- AddressRepository
SchoolAddressServiceImplementation <|-- SchoolAddressDto
class SchoolAddressServiceImplementation implements SchoolAddressService {
    - final SchoolAddressRepository schoolAddressRepository;
    - final SchoolRepository schoolRepository;
    - final AddressRepository addressRepository;
    + SchoolAddressServiceImplementation(SchoolAddressRepository schoolAddressRepository, SchoolRepository schoolRepository, AddressRepository addressRepository)
    + ResponseEntity<?> getAllSchoolAddress()
    + List<SchoolAddress> findAddressesBySchool_Id(Long schoolId)
    + ResponseEntity<?> deleteUserAddress(Long userAddressId)
    + ResponseEntity<?> updateSchoolAddress(Long schoolAddressId, SchoolAddressDto updateSchoolAddressDto)
    + ResponseEntity<?> getSchoolAddressById(Long schoolAddressId)
}

GoogleMapsService <|-- RouteRequest
class GoogleMapsService {
    - String apiKey;
    + ResponseEntity<String> computeRoutes(RouteRequest request)
}
GoogleGeocodingService <|-- RestTemplate
GoogleGeocodingService <|-- GeolocationDto
class GoogleGeocodingService {
    - String apiKey;
    - final RestTemplate restTemplate;
    + GoogleGeocodingService(RestTemplate restTemplate)
    + GeolocationDto getGeolocation(String address)
}

FatherSonRelationshipServiceImplementation <|-- FatherSonRelationshipRepository
FatherSonRelationshipServiceImplementation <|-- UserRepository
FatherSonRelationshipServiceImplementation <|-- FatherSonRelationshipDto
class FatherSonRelationshipServiceImplementation implements FatherSonRelationshipService {
    - final FatherSonRelationshipRepository fatherSonRelationshipRepository;
    - final UserRepository userRepository;
    + FatherSonRelationshipServiceImplementation(FatherSonRelationshipRepository fatherSonRelationshipRepository, UserRepository userRepository)
    + ResponseEntity<?> getAllFatherSonRelationship()
    + ResponseEntity<?> findFatherSonRelationshipByUserId(FatherSonRelationshipDto fatherSonRelationshipDto)
    + ResponseEntity<?> getFatherSonRelationshipById(Long fatherSonRelationshipId)
    + ResponseEntity<?> deleteFatherSonRelationship(Long fatherSonRelationshipId)
    + ResponseEntity<?> updateFatherSonRelationship(Long fatherSonRelationshipId, FatherSonRelationshipDto fatherSonRelationshipDto)
    + ResponseEntity<?> createFatherSonRelationship(FatherSonRelationshipDto fatherSonRelationshipDto)
}

AuthenticationServiceImplementation <|-- UserRepository
AuthenticationServiceImplementation <|-- UserDetails
AuthenticationServiceImplementation <|-- LoginRequest
AuthenticationServiceImplementation <|-- User
class AuthenticationServiceImplementation implements AuthenticationService {
    - final UserRepository userRepository;
    + AuthenticationServiceImplementation(UserRepository userRepository)
    + UserDetails loadUserByUsername(String login)
    + String getToken(LoginRequest authDto)
    + String generateToken(User user)
    + String validTokenJwt(String token)
    - Instant generateExpiryDate()
}

AddressServiceImplementation <|-- AddressRepository
AddressServiceImplementation <|-- UserRepository
AddressServiceImplementation <|-- GoogleGeocodingService
AddressServiceImplementation <|-- UserAddressRepository
AddressServiceImplementation <|-- SchoolAddressRepository
AddressServiceImplementation <|-- SchoolRepository
AddressServiceImplementation <|-- AddressUpdateDto
AddressServiceImplementation <|-- AddressDto
AddressServiceImplementation <|-- Address
class AddressServiceImplementation implements AddressService {
    - final AddressRepository addressRepository;
    - final UserRepository userRepository;
    - final GoogleGeocodingService geocodingService;
    - final UserAddressRepository userAddressRepository;
    - final SchoolAddressRepository schoolAddressRepository;
    - final SchoolRepository schoolRepository;
    + AddressServiceImplementation(AddressRepository addressRepository, UserRepository userRepository, GoogleGeocodingService geocodingService, UserAddressRepository userAddressRepository, SchoolAddressRepository schoolAddressRepository, SchoolRepository schoolRepository)
    + ResponseEntity<?> getAllAddress()
    + ResponseEntity<?> deleteAddress(Long addressId)
    + ResponseEntity<?> updateAddress(Long addressId, AddressUpdateDto addressUpdateDto)
    + ResponseEntity<?> getAddressResponseById(Long addressId)
    - School getSchoolById(Long schoolId)
    - Address createAddress(AddressDto addressDto)
    - void setAddressDetailsUpdate(Address address, AddressUpdateDto addressUpdateDto)
    - void setAddressDetails(Address address, AddressDto addressDto)
    + ResponseEntity<?> createAddressByUser(AddressDto addressDto, UUID userId)
    + ResponseEntity<?> createAddressBySchool(AddressDto addressDto, Long schoolId)
    + String getFullAddress(String street, Long number, String neighborhood, String city, String state, String postCode, String country)
}

VehicleService <|-- VehicleDto
interface VehicleService {
    VehicleDto createVehicle(VehicleDto vehicleDto);
    ResponseEntity<?> getAllVehicle();
    ResponseEntity<?> deleteVehicle(Long vehicleId);
    ResponseEntity<?> updateVehicle(Long vehicleId, VehicleDto updateVehicleDto);
    ResponseEntity<?> getVehicleById(Long vehicleId);
}

UserService <|-- UserDto
UserService <|-- UserPasswordDto
UserService <|-- UserUpdateDto
interface UserService {
    UserDto createUser(UserDto userDto);
    ResponseEntity<?> getAllUsers();
    ResponseEntity<?>  deleteUser(UUID userId);
    ResponseEntity<?>  updateUser(UUID userId, UserUpdateDto updateUserDto);
    ResponseEntity<?> getUserResponseById(UUID userId);
    ResponseEntity<?> updateUserPassword(UUID userId, UserPasswordDto updateUserDto);
}

UserAddressService <|-- UserAddressDto
interface UserAddressService {
    UserAddressDto createUserAddress(UserAddressDto userAddressDto);
    ResponseEntity<?> getAllUsersAddress();
    ResponseEntity<?> deleteUserAddress(Long userAddressId);
    ResponseEntity<?> updateUserAddress(Long userAddressId, UserAddressDto updateUserAddressDto);
    ResponseEntity<?> getUserAddressById(Long userAddressId);
    List<UserAddress> findAddressesByUser_Id(UUID userId);
}

StudentRouteService <|-- StudentRouteDto
StudentRouteService <|-- StudentRouteUpdateDto
StudentRouteService <|-- PeriodEnum
interface StudentRouteService {
    ResponseEntity<?> getAllStudentRoute();
    ResponseEntity<?> createStudentRoute(StudentRouteDto schoolDto, UUID userId);
    List<StudentRoute> findSchoolByUser_Id(UUID userId);
    ResponseEntity<?> deleteStudentRoute(Long studentSchoolId);
    ResponseEntity<?> updateStudentRoute(Long studentSchoolId, StudentRouteUpdateDto schoolDto);
    List<StudentRoute> findSchoolBySchool_Id(Long schoolId);
    ResponseEntity<?> updateStudentRouteImagem(MultipartFile file, Long routeId);
    List<StudentRouteWithAddresses> getStudentRoutesByPeriodAndDate(PeriodEnum periodEnum, LocalDate localDate);
}

SchoolService <|-- SchoolDto
interface SchoolService {
    SchoolDto createSchool(SchoolDto schoolDto);
    ResponseEntity<?> getAllSchool();
    ResponseEntity<?> deleteSchool(Long schoolId);
    ResponseEntity<?> updateSchool(Long schoolId, SchoolDto schoolDto);
    ResponseEntity<?> getSchoolById(Long schoolId);
}

SchoolAddressService <|-- SchoolAddressDto
interface SchoolAddressService {
    ResponseEntity<?> getAllSchoolAddress();
    List<SchoolAddress> findAddressesBySchool_Id(Long schoolId);
    ResponseEntity<?> deleteUserAddress(Long userAddressId);
    ResponseEntity<?> updateSchoolAddress(Long schoolAddressId, SchoolAddressDto updateSchoolAddressDto);
    ResponseEntity<?> getSchoolAddressById(Long schoolAddressId);
}

FatherSonRelationshipService <|-- FatherSonRelationshipDto
interface FatherSonRelationshipService {
    ResponseEntity<?> getAllFatherSonRelationship();
    ResponseEntity<?> getFatherSonRelationshipById(Long fatherSonRelationshipId);
    ResponseEntity<?> findFatherSonRelationshipByUserId(FatherSonRelationshipDto fatherSonRelationshipDto);
    ResponseEntity<?> deleteFatherSonRelationship(Long fatherSonRelationshipId);
    ResponseEntity<?> updateFatherSonRelationship(Long fatherSonRelationshipId, FatherSonRelationshipDto fatherSonRelationshipDto);
    ResponseEntity<?> createFatherSonRelationship(FatherSonRelationshipDto fatherSonRelationship);
}

AuthenticationService <|-- LoginRequest
interface AuthenticationService extends UserDetailsService {
    String getToken(LoginRequest authDto);
    String validTokenJwt(String token);
}

AddressService <|-- AddressDto
AddressService <|-- AddressUpdateDto
interface AddressService {
    ResponseEntity<?> createAddressByUser(AddressDto addressDto, UUID userId);
    ResponseEntity<?>  getAllAddress();
    ResponseEntity<?> deleteAddress(Long addressId);
    ResponseEntity<?> createAddressBySchool(AddressDto addressDto, Long schoolId);
    ResponseEntity<?> getAddressResponseById(Long addressId);
    ResponseEntity<?> updateAddress(Long addressId, AddressUpdateDto addressUpdateDto);
}

SwaggerConfig <|-- OpenAPI
class SwaggerConfig {
    + OpenAPI openAPI()
}

SecurityFilter <|-- AuthenticationService
SecurityFilter <|-- UserRepository
SecurityFilter <|-- HttpServletRequest
SecurityFilter <|-- HttpServletResponse
SecurityFilter <|-- FilterChain
class SecurityFilter extends OncePerRequestFilter {
    - final AuthenticationService authenticationService;
    - final UserRepository userRepository;
    + SecurityFilter(AuthenticationService authenticationService, UserRepository userRepository)
    # void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
    + String extractsTokenHeader(HttpServletRequest request)
}

SecurityConfiguration <|-- SecurityFilter
SecurityConfiguration <|-- SecurityFilterChain
SecurityConfiguration <|-- HttpSecurity
SecurityConfiguration <|-- PasswordEncoder
SecurityConfiguration <|-- AuthenticationManager
SecurityConfiguration <|-- AuthenticationConfiguration
class SecurityConfiguration {
    - final SecurityFilter securityFilter;
    + SecurityConfiguration(SecurityFilter securityFilter)
    + SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity)
    + PasswordEncoder passwordEncoder()
    + AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration)
    - static final String[] AUTH_WHITELIST
}

InitialSystemConfig <|-- UserRepository
InitialSystemConfig <|-- VehicleRespository
InitialSystemConfig <|-- PasswordEncoder
class InitialSystemConfig implements CommandLineRunner {
    - final UserRepository userRepository;
    - final VehicleRespository vehicleRespository;
    - final PasswordEncoder passwordEncoder;
    + InitialSystemConfig(UserRepository userRepository, VehicleRespository vehicleRespository, PasswordEncoder passwordEncoder)
    + void run(String... args) throws Exception
    - User createUserIfNotExist(String login, String name, String password, RoleEnum role, String lastName, String email, String cpf, String phone, String photo, StatusEnum status)
    - void createVehicleIfNotExist(Long id, String brand, String model, String licensePlate, String numberRenavam, int yearManufacturing, TypeVehicleEnum typeVehicleEnum, ColorEnum colorEnum, StatusEnum statusEnum)
}

CorsConfig <|-- CorsRegistry
class CorsConfig implements WebMvcConfigurer {
    + void addCorsMappings(CorsRegistry registry)
}

AppConfig <|-- RestTemplate
AppConfig <|-- AddressService
AppConfig <|-- AddressRepository
AppConfig <|-- UserRepository
AppConfig <|-- GoogleGeocodingService
AppConfig <|-- UserAddressRepository
AppConfig <|-- SchoolAddressRepository
AppConfig <|-- SchoolRepository
class AppConfig {
    + RestTemplate restTemplate()
    + AddressService addressService(AddressRepository addressRepository, UserRepository userRepository, GoogleGeocodingService geocodingService, UserAddressRepository userAddressRepository, SchoolAddressRepository schoolAddressRepository, SchoolRepository schoolRepository)
}

VehicleDto <|-- TypeVehicleEnum
VehicleDto <|-- ColorEnum
VehicleDto <|-- StatusEnum
class VehicleDto {
    String brand
    String model
    String licensePlate
    String numberRenavam
    int yearManufacturing
    int capacityPassengers
    TypeVehicleEnum typeVehicleEnum
    ColorEnum colorEnum
    StatusEnum statusEnum
    + static VehicleDto fromEntity(Vehicle vehicle)
}


class LoginRequest {
 String login
 String password
}

class UserUpdateDto {
    String name
    String email
    String phone
    String cpf
}

class UserPasswordDto {
    String password
}

UserDto <|-- RoleEnum
UserDto <|-- StatusEnum
UserDto <|-- UserDto
class UserDto {
    String name
    String login
    String password
    RoleEnum role
    String lastName
    String email
    String cpf
    String phone
    String photo
    StatusEnum statusEnum
    + static UserDto fromEntity(User user)
}

UserAddressDto <|-- UserAddressDto
class UserAddressDto {
    UUID userId
    Long addressId
    + static UserAddressDto fromEntity(UserAddress savedAddress)
}

StudentRouteWithAddresses <|-- StudentRoute
StudentRouteWithAddresses <|-- Address
class StudentRouteWithAddresses {
       StudentRoute studentRoute
       Address schoolAddress
       Address userAddress
}

class StudentRouteUpdateDto {
    UUID student
    Long school
}

class StudentRouteImagemUpateDto {
    MultipartFile image
}

StudentRouteDto <|-- StudentStatusEnum
StudentRouteDto <|-- PeriodEnum
class StudentRouteDto {
    Long school
    StudentStatusEnum studentStatusEnum
    PeriodEnum periodEnum
    LocalDate localDate
}

SchoolDto <|-- StatusEnum
SchoolDto <|-- SchoolDto
class SchoolDto {
    String name
    StatusEnum statusEnum
    + static SchoolDto fromEntity(School school)
}

SchoolAddressDto <|-- SchoolAddressDto
class SchoolAddressDto {
    Long schoolId
    Long addressId
    + static SchoolAddressDto fromEntity(SchoolAddress savedAddress)
}

LoginResponse <|-- RoleEnum
class LoginResponse {
    String accessToken
    UUID userId
    RoleEnum roleEnum
}

class GeolocationDto {
    double latitude
    double longitude
}

class FatherSonRelationshipDto {
    UUID responsible
    UUID student
}

AddressUpdateDto <|-- StatusEnum
class AddressUpdateDto {
    String postCode
    String street
    String neighborhood
    String city
    String state
    String country
    String complement
    Long number
    StatusEnum statusEnum
}

AddressDto <|-- StatusEnum
AddressDto <|-- AddressDto
class AddressDto {
    String postCode
    String street
    String neighborhood
    String city
    String state
    String country
    String complement
    Long number
    StatusEnum statusEnum
    + static AddressDto fromEntity(Address address)
}

VehicleController <|-- VehicleService
VehicleController <|-- VehicleDto
class VehicleController {
    - final VehicleService vehicleService;
    + VehicleController(VehicleService vehicleService)
    + VehicleDto createVehicle(@RequestBody VehicleDto vehicleDto)
    + ResponseEntity<?>  listVehicle()
    + ResponseEntity<?> deleteVehicle(@PathVariable Long vehicleId)
    + ResponseEntity<?> updateVehicle(@PathVariable Long vehicleId, @Validated @RequestBody VehicleDto updateVehicleDto)
    + ResponseEntity<?> getUserById(@PathVariable Long vehicleId)
}

UserController <|-- userService
UserController <|-- UserDto
UserController <|-- UserPasswordDto
class UserController {
    - final UserService userService;
    + UserController(UserService userService)
    + UserDto createUser(@RequestBody UserDto userDto)
    + ResponseEntity<?> listUsers()
    + ResponseEntity<?> deleteUser(@PathVariable UUID userId)
    + ResponseEntity<?> updateUser(@PathVariable UUID userId, @Validated @RequestBody UserUpdateDto updateUserDto)
    + ResponseEntity<?> updateUserPassword(@PathVariable UUID userId, @Validated @RequestBody UserPasswordDto userPasswordDtoDto)
    + ResponseEntity<?> getUserById(@PathVariable UUID userId)
}

StudentRouteController <|-- StudentRouteService
StudentRouteController <|-- StudentRouteDto
StudentRouteController <|-- PeriodEnum
class StudentRouteController {
    - final StudentRouteService studentRouteService;
    + StudentRouteController(StudentRouteService studentRouteService)
    + ResponseEntity<?> createStudentRoute(@RequestBody StudentRouteDto routeDtoDto, @PathVariable UUID userId)
    + ResponseEntity<?> listStudentRoute()
    + ResponseEntity<?> getUserAddressesByUserId(@PathVariable UUID userId)
    + ResponseEntity<?> deleteAddress(@PathVariable Long studentRouteId)
    + ResponseEntity<?> updateStudentRoute(@PathVariable Long studentRouteId, @RequestBody StudentRouteUpdateDto routeDto)
    + ResponseEntity<?> getRouteBySchool(@PathVariable Long schoolId)
    + ResponseEntity<?> updateImage(@RequestParam("file") MultipartFile file, @PathVariable Long routeId)
    + ResponseEntity<?> getRouteByPeriodAndDate(@RequestParam PeriodEnum periodEnum, @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate localDate)
}

SchoolController <|-- SchoolService
SchoolController <|-- SchoolDto
class SchoolController {
    - final SchoolService schoolService;
    + SchoolController(SchoolService schoolService)
    + SchoolDto createSchool(@RequestBody SchoolDto schoolDto)
    + ResponseEntity<?> listSchool()
    + ResponseEntity<?> deleteScholl(@PathVariable Long schoolId)
    + ResponseEntity<?> updateSchool(@PathVariable Long schoolId, @Validated @RequestBody SchoolDto schoolDto)
    + ResponseEntity<?> getSchoolById(@PathVariable Long schoolId)
}

FatherSonRelationshipController <|-- FatherSonRelationshipService
FatherSonRelationshipController <|-- FatherSonRelationshipDto
class FatherSonRelationshipController {
    - final FatherSonRelationshipService fatherSonRelationshipService;
    + FatherSonRelationshipController(FatherSonRelationshipService fatherSonRelationshipService)
    + ResponseEntity<?> fatherSonRelationshipDto(@RequestBody FatherSonRelationshipDto fatherSonRelationship)
    + ResponseEntity<?> listFatherSonRelationship()
    + ResponseEntity<?> getFatherSonRelationshipById(@PathVariable Long fatherSonRelationshipId)
    + ResponseEntity<?> getFatherSonRelationshipByUserId(@Validated @RequestBody FatherSonRelationshipDto fatherSonRelationshipDto)
    + ResponseEntity<?> deleteFatherSonRelationship(@PathVariable Long fatherSonRelationshipId)
    + ResponseEntity<?> FatherSonRelationship(@PathVariable Long fatherSonRelationshipId, @Validated @RequestBody FatherSonRelationshipDto fatherSonRelationshipDto)
}

AuthenticationController <|-- UserRepository
AuthenticationController <|-- PasswordEncoder
AuthenticationController <|-- AuthenticationManager
AuthenticationController <|-- AuthenticationService
AuthenticationController <|-- LoginRequest
class AuthenticationController {
    - final UserRepository userRepository;
    - final PasswordEncoder passwordEncoder;
    - final AuthenticationManager authenticationManager;
    - final AuthenticationService authenticationService;
    + AuthenticationController(UserRepository userRepository, PasswordEncoder passwordEncoder, AuthenticationManager authenticationManager, AuthenticationService authenticationService)
    + ResponseEntity<LoginResponse> login(@RequestBody LoginRequest loginRequest)
}

AddressController <|-- AddressService
AddressController <|-- UserAddressService
AddressController <|-- SchoolAddressService
AddressController <|-- AddressUpdateDto
AddressController <|-- AddressDto
AddressController <|-- UserAddressDto
AddressController <|-- SchoolAddressDto
class AddressController {
    - final AddressService addressService;
    - final UserAddressService userAddressService;
    - final SchoolAddressService schoolAddressService;
    + AddressController(AddressService addressService, UserAddressService userAddressService, SchoolAddressService schoolAddressService)
    + ResponseEntity<?> listAddress()
    + ResponseEntity<?> deleteAddress(@PathVariable Long addressId)
    + ResponseEntity<?> updateAddress(@PathVariable Long addressId, @RequestBody AddressUpdateDto addressUpdateDto)
    + ResponseEntity<?> getAddressById(@PathVariable Long addressId)
    + ResponseEntity<?> createAddressByUser(@RequestBody AddressDto addressDto, @PathVariable UUID userId)
    + ResponseEntity<?> listUsersAddress()
    + ResponseEntity<?> deleteUserAddress(@PathVariable Long userAddressId)
    + ResponseEntity<?> updateUserAddress(@PathVariable Long userAddressId, @Validated @RequestBody UserAddressDto updateUserAddressDto)
    + ResponseEntity<?> getUserAddressById(@PathVariable Long userAddressId)
    + ResponseEntity<?> getUserAddressesByUserId(@PathVariable UUID userId)
    + ResponseEntity<?> createAddressBySchool(@RequestBody AddressDto addressDto, @PathVariable Long schoolId)
    + ResponseEntity<?> listSchools()
    + ResponseEntity<?> getSchoolAddressById(@PathVariable Long schoolAddressId)
    + ResponseEntity<?> getUserAddressesBySchoolId(@PathVariable Long schoolId)
    + ResponseEntity<?> deleteSchoolAddress(@PathVariable Long schoolAddressId)
    + ResponseEntity<?> updateSchoolAddress(@PathVariable Long schoolAddressId, @Validated @RequestBody SchoolAddressDto updateSchoolAddressDto)
}

interface AddressRepository extends JpaRepository<Address, Long> {
}

SchoolAddressRepository <|-- SchoolAddress
interface SchoolAddressRepository extends JpaRepository<SchoolAddress, Long> {
    List<SchoolAddress> findBySchool_Id(Long schoolId);
}

FatherSonRelationshipRepository <|-- FatherSonRelationship
interface FatherSonRelationshipRepository extends JpaRepository<FatherSonRelationship, Long> {
    List<FatherSonRelationship> findByResponsible_IdOrStudent_Id(UUID responsibleId, UUID studentId);
}

SchoolRepository <|-- School
interface SchoolRepository extends JpaRepository<School, Long> {
    Optional<School> findByName(String name);
}

StudentRouteRepository <|-- StudentRoute
StudentRouteRepository <|-- PeriodEnum
interface StudentRouteRepository extends JpaRepository<StudentRoute, Long> {
    List<StudentRoute> findByUser_Id(UUID userId);
    List<StudentRoute> findBySchool_Id(Long school);
    List<StudentRoute> findByPeriodEnumAndLocalDate(PeriodEnum periodEnum, LocalDate localDate);
    List<Object[]> findWithAddressesByPeriodEnumAndLocalDateAndConfimationStudentEnumAndStudentStatusEnumNot(
            @Param("periodEnum") String periodEnum,
            @Param("localDate") LocalDate localDate,
            @Param("confimationStudentEnum") String confimationStudentEnum,
            @Param("studentStatusEnum") String studentStatusEnum);
}

UserAddressRepository <|-- UserAddress
interface UserAddressRepository extends JpaRepository<UserAddress, Long> {
    List<UserAddress> findByUser_Id(UUID userId);
}

UserRepository <|-- User
interface UserRepository extends JpaRepository<User, UUID> {
    Optional<User> findByLogin(String login);
    Optional<User> findByCpf(String cpf);
}

VehicleRespository <|-- Vehicle
interface VehicleRespository extends JpaRepository<Vehicle, Long> {
    Optional<Vehicle> findByNumberRenavan(String numberRenavan);
    Optional<Vehicle> findByLicensePlate(String licensePlate);
}


Vehicle <|-- TypeVehicleEnum
Vehicle <|-- ColorEnum
Vehicle <|-- StatusEnum
class Vehicle {
    - Long id;
    - String brand;
    - String model;
    - String licensePlate;
    - String numberRenavan;
    - int yearManufacturing;
    - int capacityPassengers;
    - TypeVehicleEnum typeVehicleEnum;
    - ColorEnum colorEnum;
    - StatusEnum statusEnum;
    + void setTypeVehicleEnum(TypeVehicleEnum typeVehicleEnum)
    + Vehicle get()
    + void set()
}

UserAddress <|-- User
UserAddress <|-- Address
class UserAddress {
    - Long id;
    - User user;
    - Address address;
    + UserAddress get()
    + void set()
}

User <|-- RoleEnum
User <|-- StatusEnum
class User implements UserDetails {
    - UUID id;
    - String name;
    - String login;
    - String password;
    - RoleEnum role;
    - String lastName;
    - String email;
    - String cpf;
    - String phone;
    - String photo;
    - StatusEnum statusEnum;
    + Collection<? extends GrantedAuthority> getAuthorities()
    + String getUsername()
    + boolean isAccountNonExpired()
    + boolean isAccountNonLocked()
    + boolean isCredentialsNonExpired()
    + boolean isEnabled()
    + boolean isLoginCorrect(LoginRequest loginRequest, PasswordEncoder passwordEncoder)
}

StudentRoute <|-- LocalDate
StudentRoute <|-- StudentStatusEnum
StudentRoute <|-- User
StudentRoute <|-- School
StudentRoute <|-- StatusRouteEnum
StudentRoute <|-- ConfimationStudentEnum
StudentRoute <|-- PeriodEnum
class StudentRoute {
    - Long id;
    - User user;
    - School school;
    - LocalDate localDate;
    - StudentStatusEnum studentStatusEnum;
    - StatusRouteEnum statusRouteEnum;
    - ConfimationStudentEnum confimationStudentEnum;
    - PeriodEnum periodEnum;
    - byte[] imageData;
    + StudentRoute get()
    + void set()
}

SchoolAddress <|-- School
SchoolAddress <|-- Address
class SchoolAddress {
    - Long id;
    - School school;
    - Address address;
    + SchoolAddress get()
    + void set()
}

School <|-- StatusEnum
class School {
    - Long id;
    - String name;
    - StatusEnum statusEnum;
    + School get()
    + void set()
}

class Location {
    - String address;
    + String get()
    + void set()
}

GeolocationResponse <|-- Result
class GeolocationResponse {
    - String status;
    - List<Result> results;
    + String getStatus()
    + void setStatus(String status)
    + List<Result> getResults()
    + void setResults(List<Result> results)
}

Result <|-- Geometry
class Result {
    - Geometry geometry;
    + Geometry getGeometry()
    + void setGeometry(Geometry geometry)
}
Geometry <|-- Location
class Geometry {
    - Location location;
    + Location getLocation()
    + void setLocation(Location location)
}

class Location {
    - double lat;
    - double lng;
    + double getLat()
    + void setLat(double lat)
    + double getLng()
    + void setLng(double lng)
}

Address <|-- StatusEnum
class Address {
    - Long id;
    - String postCode;
    - String street;
    - String neighborhood;
    - String city;
    - String state;
    - String country;
    - String complement;
    - Long number;
    - Double latitude;
    - Double longitude;
    - StatusEnum statusEnum;
    + Address get()
    + void set()
}

class ErrorResponse{
    - String message;
    + ErrorResponse(String message)
    + String getMessage()
    + void setMessage(String message)
}

FatherSonRelationship <|-- User
class FatherSonRelationship {
    - Long id;
    - User responsible;
    - User student;

    + FatherSonRelationship get()
    + void set()
}
enum ColorEnum {
    WHITE
    BLACK
    RED
    BLUE
    YELLOW
    GREEN
    SILVER
    GRAY
    ORANGE
    PINK
    BROWN
    PURPLE
    - value
    + voidColorEnum(String value)
    + String getValue()
}
enum ConfimationStudentEnum {
    CONFIRM
    CANCEL
    ABSENT
    NOTENTER
    - String confimationStudent;
    + boolean ConfimationStudentEnum(String confimationStudent)
}

enum PeriodEnum {
    MORNING
    EVENING
    NIGHT
    - String periodEnum;
    + void PeriodEnum(String PeriodEnum)
    + boolean isPeriodValid(this periodEnum)
}

enum RoleEnum {
    ADMIN
    USER
    DRIVER
    RESPONSIBLE
    STUDENT
    - String role;
    + void RoleEnum(String role)
    + boolean contains(String role)
}

enum StatusEnum {
    ACTIVATE
    DISABLED
    - String status;
    + void StatusEnum(String status)
    + String getStatus()
}

enum StatusRouteEnum {
    WAITINGTOSTART
    ROUTESTARTED
    ROUTEFINISHED
    - String routeStatus;
    + void StatusRouteEnum(String routeStatus)
    + boolean isRouteStatusValid(this statusRouteEnum)
}

enum StudentStatusEnum {
    IWONTGO
    ONEWAYONLY
    ONLYAROUND
    ROUNDTRIP
    + String routeStatus;
    + void StudentStatusEnum(String routeStatus)
    + boolean isStudentStatusValid(this studentStatusEnum)
}

enum TypeVehicleEnum {
    URBANBUS
    BUSRODOVIARIO
    MICROBUS
    VAN
    PASSING_CAR
    TRUCK
    MOTORCYCLE
    BICYCLE
    TRACTOR
    OTHER
    - int maximumCapacity;
    + void TypeVehicleEnum(int maximumCapacity)
    + int getMaximumCapacity()
}

@enduml