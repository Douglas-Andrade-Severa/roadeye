@startuml
'https://plantuml.com/class-diagram

User <|-- StatusEnum
class User implements UserDetails {
    - UUID id;
    - String name;
    - String login;
    - String password;
    - RoleEnum role;
    - String lastName;
    - String email;
    - String cpf;
    - String phone;
    - String photo;
    - String tokenPush;
    - StatusEnum statusEnum;
    + User gets()
    + void sets()
    + Collection<? extends GrantedAuthority> getAuthorities()
    + String getUsername()
    + boolean isAccountNonExpired()
    + boolean isAccountNonLocked()
    + boolean isCredentialsNonExpired()
    + boolean isEnabled()
    + boolean isLoginCorrect(LoginRequest loginRequest, PasswordEncoder passwordEncoder)
}

enum StatusEnum {
    ACTIVATE("activate"),
    DISABLED("disabled");
    + final String status;
    StatusEnum(String status)
    + String getStatus()
}

class UserPasswordDto{
    String password;
}
class UserTokenPushDto{
    String tokenPush
}

class UserUpdateDto {
    String name;
    String email;
    String phone;
    String cpf;
}

UserDto <|-- StatusEnum
UserDto <|-- User
UserDto <|-- UserDto
class UserDto{
    String name;
    String login;
    String password;
    RoleEnum role;
    String lastName;
    String email;
    String cpf;
    String phone;
    String photo;
    StatusEnum statusEnum;
    + static UserDto fromEntity(User user);
}

UserService <|-- UserDto
UserService <|-- UserPasswordDto
UserService <|-- UserTokenPushDto
UserService <|-- UserUpdateDto
interface UserService {
    UserDto createUser(UserDto userDto);
    ResponseEntity<?> getAllUsers();
    ResponseEntity<?> deleteUser(UUID userId);
    ResponseEntity<?> updateUser(UUID userId, UserUpdateDto updateUserDto);
    ResponseEntity<?> getUserResponseById(UUID userId);
    ResponseEntity<?> updateUserPassword(UUID userId, UserPasswordDto updateUserDto);
    ResponseEntity<?> updateUserTokenPush(UUID userId, UserTokenPushDto tokenPushDto);
}

UserRepository <|-- User
interface UserRepository extends JpaRepository<User, UUID> {
    Optional<User> findByLogin(String login);
    Optional<User> findByCpf(String cpf);
}

UserServiceImplementation <|-- UserRepository
UserServiceImplementation <|-- UserDto
UserServiceImplementation <|-- UserPasswordDto
UserServiceImplementation <|-- UserTokenPushDto
UserServiceImplementation <|-- User
class UserServiceImplementation implements UserService {
    - final UserRepository userRepository;
    - final PasswordEncoder passwordEncoder;
    - static final String axNotFound = "User not found";
    + UserServiceImplementation(UserRepository userRepository, PasswordEncoder passwordEncoder);
    + UserDto createUser(UserDto userDto);
    + ResponseEntity<?> getAllUsers();
    + ResponseEntity<?> deleteUser(UUID userId);
    + ResponseEntity<?> updateUser(UUID userId, UserUpdateDto updateUserDto);
    + ResponseEntity<?> updateUserPassword(UUID userId, UserPasswordDto updateUserDto);
    + ResponseEntity<?> updateUserTokenPush(UUID userId, UserTokenPushDto tokenPushDto);
    + ResponseEntity<?> getUserResponseById(UUID userId);
    - void setUserUpdateService(User user, UserUpdateDto userDto);
    - void setUserService(User user, UserDto userDto);
}

UserController <|-- UserService
UserController <|-- UserUpdateDto
UserController <|-- UserPasswordDto
UserController <|-- UserTokenPushDto
class UserController {
    - final UserService userService;
    + UserController(UserService userService)
    + UserDto createUser(@RequestBody UserDto userDto)
    + ResponseEntity<?> listUsers()
    + ResponseEntity<?> deleteUser(@PathVariable UUID userId)
    + ResponseEntity<?> updateUser(@PathVariable UUID userId, @Validated @RequestBody UserUpdateDto updateUserDto)
    + ResponseEntity<?> updateUserPassword(@PathVariable UUID userId, @Validated @RequestBody UserPasswordDto userPasswordDtoDto)
    + ResponseEntity<?> getUserById(@PathVariable UUID userId)
    + ResponseEntity<?> updateUserTokenPush(@PathVariable UUID userId, @Validated @RequestBody UserTokenPushDto tokenPushDto)
}

@enduml