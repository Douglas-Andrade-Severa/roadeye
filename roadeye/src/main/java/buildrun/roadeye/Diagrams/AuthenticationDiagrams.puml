@startuml
'https://plantuml.com/class-diagram


UserRepository <|-- User
interface UserRepository extends JpaRepository<User, UUID> {
    Optional<User> findByLogin(String login);
    Optional<User> findByCpf(String cpf);
}

User <|-- StatusEnum
class User implements UserDetails {
    - UUID id;
    - String name;
    - String login;
    - String password;
    - RoleEnum role;
    - String lastName;
    - String email;
    - String cpf;
    - String phone;
    - String photo;
    - String tokenPush;
    - StatusEnum statusEnum;
    + User gets()
    + void sets()
    + Collection<? extends GrantedAuthority> getAuthorities()
    + String getUsername()
    + boolean isAccountNonExpired()
    + boolean isAccountNonLocked()
    + boolean isCredentialsNonExpired()
    + boolean isEnabled()
    + boolean isLoginCorrect(LoginRequest loginRequest, PasswordEncoder passwordEncoder)
}

enum StatusEnum {
    ACTIVATE("activate"),
    DISABLED("disabled");
    + final String status;
    StatusEnum(String status)
    + String getStatus()
}

RoleEnum <|-- RoleEnum
enum RoleEnum {
    ADMIN("admin"),
    USER("user"),
    DRIVER("driver"),
    RESPONSIBLE("responsible"),
    STUDENT("student");
    private String role;
    RoleEnum(String role);
    + static boolean contains(String role);
}

class LoginRequest {
    String login;
    String password;
}

LoginResponse <|-- RoleEnum
class LoginResponse {
    String accessToken;
    UUID userId;
    RoleEnum roleEnum;
}

AuthenticationService <|-- LoginResponse
interface AuthenticationService extends UserDetailsService {
    String getToken(LoginRequest authDto);
    String validTokenJwt(String token);
}

AuthenticationController <|-- UserRepository
AuthenticationController <|-- PasswordEncoder
AuthenticationController <|-- AuthenticationManager
AuthenticationController <|-- LoginRequest
AuthenticationController <|-- LoginResponse
class AuthenticationController {
    - final UserRepository userRepository;
    - final PasswordEncoder passwordEncoder;
    - final AuthenticationManager authenticationManager;
    - final AuthenticationService authenticationService;

    + AuthenticationController(UserRepository userRepository, PasswordEncoder passwordEncoder, AuthenticationManager authenticationManager, AuthenticationService authenticationService);
    + ResponseEntity<LoginResponse> login(@RequestBody LoginRequest loginRequest);
}

@enduml